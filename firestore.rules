/**
 * @fileoverview Firestore Security Rules for the DualCare application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing broader access to SOS alerts.
 * All user-specific data is nested under the `/users/{userId}` path, ensuring that only the authenticated user can access their own data.
 * SOS alerts are stored in a top-level collection, accessible to all authenticated users, with application-level filtering.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user with matching UID.
 * - /users/{userId}/medicines/{medicineId}: Medicine schedules for each user, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Daily tasks for each user, owned by the user.
 * - /users/{userId}/medicineLogs/{medicineLogId}: Medicine intake logs, owned by the user.
 * - /users/{userId}/taskLogs/{taskLogId}: Task completion logs, owned by the user.
 * - /sosAlerts/{alertId}: SOS alerts, accessible to all authenticated users (application handles filtering).
 * - /users/{userId}/moodLogs/{moodLogId}: Mood logs for each user, owned by the user.
 * - /users/{userId}/medicalRecords/{medicalRecordId}: Medical records for each user, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user information.
 * - SOS alerts are publicly readable by all authenticated users (the application is responsible for filtering).
 * - All write operations are protected by authorization checks based on user identity and ownership.
 *
 * Denormalization for Authorization:
 * - The data model leverages path-based authorization, so no denormalization is explicitly needed.  The `userId` is embedded in the path for all user-specific collections.
 *
 * Structural Segregation:
 * - Private user data is segregated under the `/users/{userId}` path, while potentially shared data (SOS alerts) resides in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, and delete their profile.
     * @deny (create) - Authenticated user with mismatched userId cannot create a profile.
     * @deny (get, update, delete) - Authenticated user with mismatched userId cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medicines. Only the authenticated user can manage their own medicine schedules.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own medicine schedules.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's medicine schedules.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicines/{medicineId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tasks. Only the authenticated user can manage their own daily tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own tasks.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medicine logs. Only the authenticated user can manage their own medicine logs.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own medicine logs.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's medicine logs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for task logs. Only the authenticated user can manage their own task logs.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own task logs.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's task logs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read and write SOS alerts. Application logic is responsible for filtering.
     * @path /sosAlerts/{alertId}
     * @allow (get, list) - Any authenticated user can read SOS alerts.
     * @allow (create, update, delete) - Any authenticated user can create, update, and delete SOS alerts.
     * @principle Open access for authenticated users, with application-level filtering.
     */
    match /sosAlerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces user-ownership for mood logs. Only the authenticated user can manage their own mood logs.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own mood logs.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's mood logs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medical records. Only the authenticated user can manage their own medical records.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow (create, get, update, delete, list) - Authenticated user with matching userId can manage their own medical records.
     * @deny (create, get, update, delete, list) - Authenticated user with mismatched userId cannot manage another user's medical records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}