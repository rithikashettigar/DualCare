/**
 * @description This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 * All data is nested under /users/{userId}, ensuring clear ownership and simplifying security rules.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.  Only the user with the matching UID can read or write their own profile.
 * - /users/{userId}/medicines/{medicineId}: Stores medicine schedules.  Only the user with the matching UID can manage their medicines.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user. Only the user with the matching UID can manage their tasks.
 * - /users/{userId}/medicineLogs/{medicineLogId}: Stores medicine logs.  Only the user with the matching UID can manage their medicine logs.
 * - /users/{userId}/taskLogs/{taskLogId}: Stores task logs. Only the user with the matching UID can manage their task logs.
 * - /users/{userId}/moodLogs/{moodLogId}: Stores mood logs. Only the user with the matching UID can manage their mood logs.
 * - /users/{userId}/medicalRecords/{medicalRecordId}: Stores medical records. Only the user with the matching UID can manage their medical records.
 * - /sosAlerts/{alertId}: Stores SOS alerts. All logged-in users can read this collection, but write access is not locked down in this prototype.
 *
 * @keySecurityDecisions
 * - Users can only access their own data, based on their UID.
 * - Listing other users' data is explicitly denied.
 * - SOS alerts are readable by any logged-in user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile with ID 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their own profile.
     * @allow (update) - User with UID 'user_abc' can update their own profile.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read the profile of user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medicines subcollection.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow (create) - User with UID 'user_abc' can create a medicine with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read medicine with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update medicine with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete medicine with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a medicine with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a medicine with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's medicine subcollection.
     */
    match /users/{userId}/medicines/{medicineId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tasks subcollection.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user_abc' can create a task with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read task with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update task with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete task with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a task with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a task with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's task subcollection.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medicineLogs subcollection.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow (create) - User with UID 'user_abc' can create a medicineLog with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read medicineLog with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update medicineLog with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete medicineLog with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a medicineLog with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a medicineLog with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's medicineLogs subcollection.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for taskLogs subcollection.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow (create) - User with UID 'user_abc' can create a taskLog with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read taskLog with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update taskLog with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete taskLog with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a taskLog with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a taskLog with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's taskLogs subcollection.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows any signed-in user to read SOS alerts.
     * @path /sosAlerts/{alertId}
     * @allow (get) - Any signed-in user can read an SOS alert.
     * @allow (list) - Any signed-in user can list SOS alerts.
     * @deny (create) - No one can create an SOS alert through direct Firestore writes (assumed to be handled by a backend function).
     * @deny (update) - No one can update an SOS alert through direct Firestore writes.
     * @deny (delete) - No one can delete an SOS alert through direct Firestore writes.
     * @principle Allows public read access for SOS alerts to facilitate monitoring.
     */
    match /sosAlerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for moodLogs subcollection.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow (create) - User with UID 'user_abc' can create a moodLog with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read moodLog with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update moodLog with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete moodLog with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a moodLog with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a moodLog with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's moodLogs subcollection.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for medicalRecords subcollection.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow (create) - User with UID 'user_abc' can create a medicalRecord with userId 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read medicalRecord with userId 'user_abc'.
     * @allow (update) - User with UID 'user_abc' can update medicalRecord with userId 'user_abc'.
     * @allow (delete) - User with UID 'user_abc' can delete medicalRecord with userId 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a medicalRecord with userId 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a medicalRecord with userId 'user_abc'.
     * @principle Enforces document ownership for all operations within the user's medicalRecords subcollection.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}