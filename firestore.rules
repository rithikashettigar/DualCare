/**
 * @fileoverview Firestore Security Rules for the DualCare application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data nested under `/users/{userId}`.
 * Public data (SOS alerts) is stored in a top-level collection with the expectation that client-side code will filter the data.
 * Authorization data is embedded in document paths to avoid costly `get()` calls within rules.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/medicines/{medicineId}: Medicine schedules, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Daily tasks, owned by the user.
 * - /users/{userId}/medicineLogs/{medicineLogId}: Medicine intake logs, owned by the user.
 * - /users/{userId}/taskLogs/{taskLogId}: Task completion logs, owned by the user.
 * - /sosAlerts/{alertId}: SOS alerts, readable by all logged-in users.
 * - /users/{userId}/moodLogs/{moodLogId}: Mood logs, owned by the user.
 * - /users/{userId}/medicalRecords/{medicalRecordId}: Medical records, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/sosAlerts` collection.
 * - All other collections require user authentication.
 * - Data validation is minimal (focused on relational integrity and ownership).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the `users` collection rules.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile.
     * @deny (create) User attempts to create a profile for another user.
     * @allow (get, update, delete) Owner can access their profile.
     * @deny (get, update, delete) Non-owner attempts to access.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `medicines` subcollection rules.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow (create) Owner can create medicine entries under their user ID.
     * @deny (create) Non-owner attempts to create medicine entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their medicine entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage medicine entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/medicines/{medicineId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `tasks` subcollection rules.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Owner can create task entries under their user ID.
     * @deny (create) Non-owner attempts to create task entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their task entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage task entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `medicineLogs` subcollection rules.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow (create) Owner can create medicine log entries under their user ID.
     * @deny (create) Non-owner attempts to create medicine log entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their medicine log entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage medicine log entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `taskLogs` subcollection rules.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow (create) Owner can create task log entries under their user ID.
     * @deny (create) Non-owner attempts to create task log entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their task log entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage task log entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `sosAlerts` collection rules.
     * @path /sosAlerts/{alertId}
     * @allow (get, list) Any signed-in user can read SOS alerts.
     * @allow (create) Any signed-in user can create SOS alerts. The userId must match.
     * @deny (update, delete) No user can update or delete an SOS alert.
     * @principle Allows public read access for SOS alerts, while restricting writes to authenticated users.
     */
    match /sosAlerts/{alertId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the `moodLogs` subcollection rules.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow (create) Owner can create mood log entries under their user ID.
     * @deny (create) Non-owner attempts to create mood log entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their mood log entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage mood log entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the `medicalRecords` subcollection rules.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow (create) Owner can create medical record entries under their user ID.
     * @deny (create) Non-owner attempts to create medical record entries under another user ID.
     * @allow (get, list, update, delete) Owner can manage their medical record entries.
     * @deny (get, list, update, delete) Non-owner attempts to manage medical record entries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}