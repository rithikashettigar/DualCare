/**
 * @file Firestore Security Rules for DualCare application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and allows for public read access to SOS alerts.
 * It avoids `get()` calls in security rules by denormalizing authorization data, enabling atomic operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Root of all user-specific data, ensuring clear ownership.
 * - /users/{userId}/medicines/{medicineId}: Stores medicine schedules.
 * - /users/{userId}/tasks/{taskId}: Stores daily tasks.
 * - /users/{userId}/medicineLogs/{medicineLogId}: Stores medicine intake logs.
 * - /users/{userId}/taskLogs/{taskLogId}: Stores task completion logs.
 * - /sosAlerts/{alertId}: Stores SOS alerts. Publicly readable, application is responsible for filtering.
 * - /users/{userId}/moodLogs/{moodLogId}: Stores mood logs.
 * - /users/{userId}/medicalRecords/{medicalRecordId}: Stores medical records.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - SOS alerts are publicly readable, but the application must filter them based on caregiver roles.
 * - The rules do not enforce specific data types or schema validation (except for ownership).
 * - The rules explicitly deny listing of the /users collection to prevent user enumeration.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in subcollections to maintain user context and ownership, avoiding the need for `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow None (listing is denied)
     * @deny list: Always. Listing all users is not permitted.
     * @principle Prevents user enumeration and protects user privacy.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user creating their own profile.
     * @allow (get, update, delete) Authenticated user accessing their own profile.
     * @deny (create) Authenticated user creating a profile for another user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to medicine schedules for a specific user.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow (create, get, update, delete) Authenticated user managing their own medicine schedules.
     * @deny (create, get, update, delete) Authenticated user managing medicine schedules for another user.
     * @principle Enforces document ownership for medicine schedules.
     */
    match /users/{userId}/medicines/{medicineId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, update, delete) Authenticated user managing their own tasks.
     * @deny (create, get, update, delete) Authenticated user managing tasks for another user.
     * @principle Enforces document ownership for tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to medicine logs for a specific user.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow (create, get, update, delete) Authenticated user managing their own medicine logs.
     * @deny (create, get, update, delete) Authenticated user managing medicine logs for another user.
     * @principle Enforces document ownership for medicine logs.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to task logs for a specific user.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow (create, get, update, delete) Authenticated user managing their own task logs.
     * @deny (create, get, update, delete) Authenticated user managing task logs for another user.
     * @principle Enforces document ownership for task logs.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to SOS alerts. All users can read SOS alerts, writes are disallowed.
     * The application layer handles caregiver-specific filtering.
     * @path /sosAlerts/{alertId}
     * @allow (get, list) All users can read SOS alerts.
     * @deny (create, update, delete) No direct modification of alerts via rules.
     * @principle Public read access for SOS alerts; application handles filtering.
     */
    match /sosAlerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to mood logs for a specific user.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow (create, get, update, delete) Authenticated user managing their own mood logs.
     * @deny (create, get, update, delete) Authenticated user managing mood logs for another user.
     * @principle Enforces document ownership for mood logs.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to medical records for a specific user.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow (create, get, update, delete) Authenticated user managing their own medical records.
     * @deny (create, get, update, delete) Authenticated user managing medical records for another user.
     * @principle Enforces document ownership for medical records.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}