/**
 * @file Firebase Security Rules for DualCare Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data nested under `/users/{userId}`.
 * SOS Alerts are publicly readable, but write access is restricted.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, the root of user-specific data.
 * - `/users/{userId}/medicines/{medicineId}`: Medicine schedules for each user.
 * - `/users/{userId}/tasks/{taskId}`: Daily tasks for each user.
 * - `/users/{userId}/medicineLogs/{medicineLogId}`: Logs of medicine intake.
 * - `/users/{userId}/taskLogs/{taskLogId}`: Logs of task completion.
 * - `/sosAlerts/{alertId}`: SOS alerts triggered by users.
 * - `/users/{userId}/moodLogs/{moodLogId}`: Mood logs for each user.
 * - `/users/{userId}/medicalRecords/{medicalRecordId}`: Medical records for each user.
 *
 * Key Security Decisions:
 * - User data is private and accessible only to the authenticated user.
 * - SOS Alerts are publicly readable to facilitate caregiver response, but write-protected.
 * - List operations are generally allowed for user-owned subcollections.
 *
 * Denormalization for Authorization:
 * The data structure embeds the `userId` in subcollections, eliminating the need for `get()` calls in security rules. This simplifies authorization and improves performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for medicines. Only the authenticated user can manage their own medicine schedules.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow (create) - User with UID 'user123' can create a medicine at /users/user123/medicines/medicine001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete medicines under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a medicine at /users/user123/medicines/medicine001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access medicines under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicines/{medicineId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for tasks. Only the authenticated user can manage their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task at /users/user123/tasks/task001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete tasks under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a task at /users/user123/tasks/task001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access tasks under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for medicine logs. Only the authenticated user can manage their own medicine logs.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow (create) - User with UID 'user123' can create a medicine log at /users/user123/medicineLogs/log001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete medicine logs under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a medicine log at /users/user123/medicineLogs/log001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access medicine logs under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for task logs. Only the authenticated user can manage their own task logs.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow (create) - User with UID 'user123' can create a task log at /users/user123/taskLogs/log001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete task logs under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a task log at /users/user123/taskLogs/log001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access task logs under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to SOS alerts, but restricts write access.
     * @path /sosAlerts/{alertId}
     * @allow (get, list) - Any user can read SOS alerts.
     * @deny (create, update, delete) - No user can create, update, or delete SOS alerts through the client.
     * @principle Provides public read access for immediate response, while maintaining write control.
     */
    match /sosAlerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces ownership for mood logs. Only the authenticated user can manage their own mood logs.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow (create) - User with UID 'user123' can create a mood log at /users/user123/moodLogs/log001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete mood logs under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a mood log at /users/user123/moodLogs/log001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access mood logs under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for medical records. Only the authenticated user can manage their own medical records.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow (create) - User with UID 'user123' can create a medical record at /users/user123/medicalRecords/record001.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete medical records under /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a medical record at /users/user123/medicalRecords/record001.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access medical records under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}