/**
 * @fileoverview Firestore Security Rules for the DualCare application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * while allowing broader access to SOS alerts for caregiver coordination.
 * It avoids costly `get()` operations by embedding user IDs within
 * document paths and enforces authorization at the collection level.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/medicines/{medicineId}: Medicine schedules, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Task schedules, owned by the user.
 * - /users/{userId}/medicineLogs/{medicineLogId}: Medicine intake logs, owned by the user.
 * - /users/{userId}/taskLogs/{taskLogId}: Task completion logs, owned by the user.
 * - /sosAlerts/{alertId}: SOS alerts, accessible to all caregivers (application handles filtering).
 * - /users/{userId}/moodLogs/{moodLogId}: Mood logs, owned by the user.
 * - /users/{userId}/medicalRecords/{medicalRecordId}: Medical records, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data within their /users/{userId} subcollections.
 * - SOS alerts are broadly accessible for rapid response coordination.
 * - No user listing is allowed for privacy.
 *
 * Denormalization for Authorization:
 *  - The user ID is embedded in the path for all user-owned data, eliminating the need for `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId} to ensure clear ownership and prevent accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root database.  No direct access is allowed.
     * @path /databases/{database}/documents
     * @allow get, list: if false;
     * @allow create, update, delete: if false;
     * @deny get, list: Always.
     * @deny create, update, delete: Always.
     * @principle Prevents any direct reads or writes to the root of the database.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Controls access to user profiles. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: Always.
     * @deny create: if !isSignedIn() || !isOwner(userId) || request.auth.uid != userId;
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to medicine schedules for a user.
     * @path /users/{userId}/medicines/{medicineId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own medicine schedules.
     */
    match /users/{userId}/medicines/{medicineId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks for a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to medicine logs for a user.
     * @path /users/{userId}/medicineLogs/{medicineLogId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own medicine logs.
     */
    match /users/{userId}/medicineLogs/{medicineLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task logs for a user.
     * @path /users/{userId}/taskLogs/{taskLogId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own task logs.
     */
    match /users/{userId}/taskLogs/{taskLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to SOS alerts.
     * @path /sosAlerts/{alertId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn() || resource == null;
     * @deny delete: if !isSignedIn() || resource == null;
     * @principle Allows all authenticated users to create, view, and manage SOS alerts.
     * The application logic is responsible for filtering the alerts relevant to a caregiver.
     */
    match /sosAlerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to mood logs for a user.
     * @path /users/{userId}/moodLogs/{moodLogId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own mood logs.
     */
    match /users/{userId}/moodLogs/{moodLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to medical records for a user.
     * @path /users/{userId}/medicalRecords/{medicalRecordId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId) && resource != null;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny list: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId) || resource == null;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces user-ownership: Only the authenticated user can manage their own medical records.
     */
    match /users/{userId}/medicalRecords/{medicalRecordId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}